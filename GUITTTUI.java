/*
Written May 2015 using NetBeans.
 */

package my.guitttui;

/**
 *
 * @author Qi.S074
 */
public class GUITTTUI extends javax.swing.JFrame {
    private int turn;
    private javax.swing.JButton[][] board;
    private boolean xWin, oWin;
    private int play;
    /**
     * Creates new form GUITTTUI
     */
    public GUITTTUI() {
        initComponents();
        turn = 1;
        board = new javax.swing.JButton[][]{{topLeft, topCenter, topRight},
                                     {middleLeft, middleCenter, middleRight},
                                     {bottomLeft,bottomCenter,bottomRight}};
        for(int r = 0; r< board.length; r++)
            for(int c = 0; c<board[r].length; c++)
                board[r][c].setText("");
        play = -1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        topLeft = new javax.swing.JButton();
        topCenter = new javax.swing.JButton();
        topRight = new javax.swing.JButton();
        middleLeft = new javax.swing.JButton();
        middleCenter = new javax.swing.JButton();
        middleRight = new javax.swing.JButton();
        bottomLeft = new javax.swing.JButton();
        bottomCenter = new javax.swing.JButton();
        bottomRight = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 255));

        topLeft.setBackground(new java.awt.Color(153, 255, 204));
        topLeft.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        topLeft.setForeground(new java.awt.Color(0, 0, 102));
        topLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topLeftActionPerformed(evt);
            }
        });

        topCenter.setBackground(new java.awt.Color(153, 255, 204));
        topCenter.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        topCenter.setForeground(new java.awt.Color(0, 0, 102));
        topCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topCenterActionPerformed(evt);
            }
        });

        topRight.setBackground(new java.awt.Color(153, 255, 204));
        topRight.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        topRight.setForeground(new java.awt.Color(0, 0, 102));
        topRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topRightActionPerformed(evt);
            }
        });

        middleLeft.setBackground(new java.awt.Color(153, 255, 204));
        middleLeft.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        middleLeft.setForeground(new java.awt.Color(0, 0, 102));
        middleLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                middleLeftActionPerformed(evt);
            }
        });

        middleCenter.setBackground(new java.awt.Color(153, 255, 204));
        middleCenter.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        middleCenter.setForeground(new java.awt.Color(0, 0, 102));
        middleCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                middleCenterActionPerformed(evt);
            }
        });

        middleRight.setBackground(new java.awt.Color(153, 255, 204));
        middleRight.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        middleRight.setForeground(new java.awt.Color(0, 0, 102));
        middleRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                middleRightActionPerformed(evt);
            }
        });

        bottomLeft.setBackground(new java.awt.Color(153, 255, 204));
        bottomLeft.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        bottomLeft.setForeground(new java.awt.Color(0, 0, 102));
        bottomLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottomLeftActionPerformed(evt);
            }
        });

        bottomCenter.setBackground(new java.awt.Color(153, 255, 204));
        bottomCenter.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        bottomCenter.setForeground(new java.awt.Color(0, 0, 102));
        bottomCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottomCenterActionPerformed(evt);
            }
        });

        bottomRight.setBackground(new java.awt.Color(153, 255, 204));
        bottomRight.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        bottomRight.setForeground(new java.awt.Color(0, 0, 102));
        bottomRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottomRightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(topLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(middleLeft))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(topCenter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(topRight))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(middleCenter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(middleRight))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bottomLeft)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bottomCenter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bottomRight)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bottomCenter, bottomLeft, bottomRight, middleCenter, middleLeft, middleRight, topCenter, topLeft, topRight});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(topCenter)
                        .addComponent(topRight))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(topLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(middleLeft)
                            .addComponent(middleCenter)
                            .addComponent(middleRight, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bottomLeft)
                            .addComponent(bottomCenter)
                            .addComponent(bottomRight))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bottomCenter, bottomLeft, bottomRight, middleCenter, middleLeft, middleRight, topCenter, topLeft, topRight});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetGame()
    {
        if(play == 0)
        {
            turn = 1;
            for(int r = 0; r<board.length; r++)
                for(int c = 0; c< board[r].length; c++)
                    board[r][c].setText("");
            play = -1;
            oWin = false;
            xWin = false;
        }
        else
        {
            javax.swing.JOptionPane.showMessageDialog(null,"Thanks for Playing! Good Bye!");
            System.exit(0);
        }
    }

    private void checkWin()
    {
        for(int r = 0; r< board.length; r++)
        {
            if(board[r][0].getText().equals(board[r][1].getText()) && board[r][1].getText().equals(board[r][2].getText()))
            {
                 if(board[r][0].getText().equals("X"))
                     xWin = true;
                 else if(board[r][0].getText().equals("O"))
                     oWin = true;
            }
        }
        for(int c = 0; c< board.length; c++)
        {
            if(board[0][c].getText().equals(board[1][c].getText()) && board[1][c].getText().equals(board[2][c].getText()))
            {
                 if(board[0][c].getText().equals("X"))
                     xWin = true;
                 else if(board[0][c].getText().equals("O"))
                     oWin = true;
            }
        }
        if(board[0][2].getText().equals(board[1][1].getText()) && board[1][1].getText().equals(board[2][0].getText()))
        {
            if(board[0][2].getText().equals("X"))
                xWin = true;
            else if(board[0][2].getText().equals("O"))
                oWin = true;
        }

        if(board[0][0].getText().equals(board[1][1].getText()) && board[1][1].getText().equals(board[2][2].getText()))
        {
            if(board[0][0].getText().equals("X"))
                xWin = true;
            else if(board[0][0].getText().equals("O"))
                oWin = true;
        }

    }
    private boolean checkTie()
    {
        if(turn>9)
            if(!xWin && !oWin)
                return true;
        return false;
    }
    private void bottomCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomCenterActionPerformed
        if(board[2][1].getText().equals(""))
        {
            if(turn%2==1)
                board[2][1].setText("X");
            else if(turn%2==0)
                board[2][1].setText("O");
            checkWin();
            turn++;
            if(xWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"X Wins!\nPlay Again?");
                resetGame();
            }
            else if(oWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"O Wins!");
                resetGame();
            }

            if(checkTie())
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"Tie. \nPlay Again?");
                resetGame();
            }
        }
        else
            javax.swing.JOptionPane.showMessageDialog(null,"Space already taken.");
    }//GEN-LAST:event_bottomCenterActionPerformed

    private void topLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topLeftActionPerformed
        if(board[0][0].getText().equals(""))
        {
            if(turn%2==1)
                board[0][0].setText("X");
            else if(turn%2==0)
                board[0][0].setText("O");
            turn++;
            checkWin();
            if(xWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"X Wins!\nPlay Again?");
                resetGame();
            }
            else if(oWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"O Wins!\nPlay Again");
                resetGame();
            }

            if(checkTie())
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"Tie");
                resetGame();
            }
        }
        else
            javax.swing.JOptionPane.showMessageDialog(null,"Space already taken.");
    }//GEN-LAST:event_topLeftActionPerformed

    private void middleLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_middleLeftActionPerformed
        if(board[1][0].getText().equals(""))
        {
            if(turn%2==1)
                board[1][0].setText("X");
            else if(turn%2==0)
                board[1][0].setText("O");
            turn++;
            checkWin();
            if(xWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"X Wins!\nPlay Again?");
                resetGame();
            }
            else if(oWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"O Wins!\nPlay Again?");
                resetGame();
            }

            if(checkTie())
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"Tie\n PlayAgain?");
                resetGame();
            }
        }
        else
            javax.swing.JOptionPane.showMessageDialog(null,"Space already taken.");
    }//GEN-LAST:event_middleLeftActionPerformed

    private void bottomLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomLeftActionPerformed
        if(board[2][0].getText().equals(""))
        {
            if(turn%2==1)
                board[2][0].setText("X");
            else if(turn%2==0)
                board[2][0].setText("O");
            checkWin();
            turn++;
            if(xWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"X Wins!\nPlay Again?");
                resetGame();
            }
            else if(oWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"O Wins!\nPlay Again?");
                resetGame();
            }

            if(checkTie())
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"Tie \nPlay Again?");
                resetGame();
            }
        }
        else
            javax.swing.JOptionPane.showMessageDialog(null,"Space already taken.");
    }//GEN-LAST:event_bottomLeftActionPerformed

    private void topCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topCenterActionPerformed
        if(board[0][1].getText().equals(""))
        {
            if(turn%2==1)
                board[0][1].setText("X");
            else if(turn%2==0)
                board[0][1].setText("O");
            turn++;
            checkWin();
            if(xWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"X Wins!\nPlay Again?");
                resetGame();
            }
            else if(oWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"O Wins!\nPlay Again?");
                resetGame();
            }

            if(checkTie())
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"Tie \nPlay Again?");
                resetGame();
            }
        }
        else
            javax.swing.JOptionPane.showMessageDialog(null,"Space already taken.");
    }//GEN-LAST:event_topCenterActionPerformed

    private void topRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topRightActionPerformed
        if(board[0][2].getText().equals(""))
        {
            if(turn%2==1)
                board[0][2].setText("X");
            else if(turn%2==0)
                board[0][2].setText("O");
            turn++;
            checkWin();
            if(xWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"X Wins!\nPlay Again?");
                resetGame();
            }
            else if(oWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"O Wins!\nPlay Again?");
                resetGame();
            }

            if(checkTie())
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"Tie.\nPlay Again?");
                resetGame();
            }
        }
        else
            javax.swing.JOptionPane.showMessageDialog(null,"Space already taken.");
    }//GEN-LAST:event_topRightActionPerformed

    private void middleCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_middleCenterActionPerformed
        if(board[1][1].getText().equals(""))
        {
            if(turn%2==1)
                board[1][1].setText("X");
            else if(turn%2==0)
                board[1][1].setText("O");
            turn++;
            checkWin();
            if(xWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"X Wins!\nPlay Again?");
                resetGame();
            }
            else if(oWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"O Wins!\nPlay Again?");
                resetGame();
            }

            if(checkTie())
            {
                javax.swing.JOptionPane.showMessageDialog(null,"Tie\nPlay Again?");
                resetGame();
            }
        }
        else
            javax.swing.JOptionPane.showMessageDialog(null,"Space already taken.");
    }//GEN-LAST:event_middleCenterActionPerformed

    private void middleRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_middleRightActionPerformed
        if(board[1][2].getText().equals(""))
        {
            if(turn%2==1)
                board[1][2].setText("X");
            else if(turn%2==0)
            {
                board[1][2].setText("O");
            }
            turn++;
            checkWin();
            if(xWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"X Wins!\nPlay Again?");
                resetGame();
            }
            else if(oWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"O Wins!\nPlay Again?");
                resetGame();
            }

            if(checkTie())
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"Tie.\nPlay Again?");
                resetGame();
            }
        }
        else
            javax.swing.JOptionPane.showMessageDialog(null,"Space already taken.");
    }//GEN-LAST:event_middleRightActionPerformed

    private void bottomRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomRightActionPerformed
        if(bottomRight.getText().equals(""))
        {
            if(turn%2==1)
                board[2][2].setText("X");
            else if(turn%2==0)
                board[2][2].setText("O");
            turn++;
            checkWin();
            if(xWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"X Wins!\nPlay Again?");
                resetGame();
            }
            else if(oWin)
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"O Wins!\nPlay Again?");
                resetGame();
            }

            if(checkTie())
            {
                play = javax.swing.JOptionPane.showConfirmDialog(null,"Tie\nPlay Again?");
                resetGame();
            }
        }
        else
            javax.swing.JOptionPane.showMessageDialog(null,"Space already taken.");
    }//GEN-LAST:event_bottomRightActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUITTTUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUITTTUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUITTTUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUITTTUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUITTTUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bottomCenter;
    private javax.swing.JButton bottomLeft;
    private javax.swing.JButton bottomRight;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton middleCenter;
    private javax.swing.JButton middleLeft;
    private javax.swing.JButton middleRight;
    private javax.swing.JButton topCenter;
    private javax.swing.JButton topLeft;
    private javax.swing.JButton topRight;
    // End of variables declaration//GEN-END:variables
}
